#include<iostream>
#include<Eigen/Dense>
#include<iomanip>
#include<fstream>
#include<math.h>
#include<vector>

using namespace std;
using namespace Eigen;


/*To compute the Residual*/
double sumofsquaresofcoeff(MatrixXd P) {
	double s = 0;

	for (int i = 0; i < P.rows(); i++) {
		for (int j = 0; j < P.cols(); j++) {
			s += P(i, j) * P(i, j);
		}
	}
	return s;
}

/*To compute the value of function y=f(x) ; arguments : Parameters, x */
MatrixXd function_y(MatrixXd para, MatrixXd x) {
	int number_of_data_points = x.rows();
	MatrixXd y(number_of_data_points, 1);
	for (int i = 0; i < number_of_data_points; i++) {
		y(i, 0) = para(0, 0) + para(1, 0) * x(i, 0) + para(2, 0) * pow(x(i, 0), 2)+ para(3, 0) * pow(x(i, 0), 4);
	}
	return y;
}

/*To compute the deciding factor 'rho' for increase or decrease of damping factor Lambda*/
double rho_function(MatrixXd para, MatrixXd x, MatrixXd h, MatrixXd Jacobian, MatrixXd y_measured, double lambda) {
	cout << "para=\n" << para << endl;
	cout << "h=\n" << h << endl;
	cout << "J=\n" << Jacobian << endl;
	cout << "lambda=\n" << lambda << endl;

	MatrixXd value_arr = h.transpose() * (lambda * h + Jacobian.transpose() * (y_measured - function_y(para, x)));
	double value = value_arr(0, 0);
	return (sumofsquaresofcoeff(y_measured - function_y(para, x)) - sumofsquaresofcoeff(y_measured - function_y(para + h, x))) / (para.rows()* value);
}

/*To compute the Jacobian Matrix by finite differences*/
MatrixXd jacobian_function(MatrixXd x, MatrixXd para, MatrixXd initial_deflection) {
	
	MatrixXd Jacobian_Matrix(x.rows(), para.rows());
	MatrixXd y_para = function_y(para, x);
	MatrixXd y_deflected(x.rows(), 1);

	for (int i = 0; i < para.rows(); i++) {

		para(i, 0) = para(i, 0) + initial_deflection(i, 0);		/*Changing the parameters one by one */

		y_deflected = function_y(para, x);	/*Computing the deflected fucntion arrray */
		for (int j = 0; j < x.rows(); j++) {
			Jacobian_Matrix(j, i) = (y_deflected(j, 0) - y_para(j, 0)) / initial_deflection(i, 0);
		}
		para(i, 0) = para(i, 0) - initial_deflection(i, 0);		/*Bringing back the parametes to original value*/
	}
	return Jacobian_Matrix;
}

/*Levenberg-Marquardt Algorithm ; Arguements: Actual function value, x ,Initial deflection of parameters , Initial guess of parameters , Damping factor Lambda */
MatrixXd levenberg_fit(MatrixXd y_measured, MatrixXd x, MatrixXd initial_deflection, MatrixXd para, double lambda) {

	MatrixXd IdentityMat=MatrixXd::Identity(para.rows(), para.rows());
	int count = 0;
	double v = 2.0;
	double chi2p = sumofsquaresofcoeff(y_measured - function_y(para, x)) / para.rows(); /*Residual for initial guess of parameters*/
	do {
		count++;
		cout << "\nCount = " << count << endl;

		//cout << "Parameters=\n" << para << endl;

		MatrixXd y = function_y(para, x);	/*Function Array*/
		double chi2p_plus_h;		/*Residual for next iteration*/
		MatrixXd J = jacobian_function(x, para, initial_deflection);	/*Jacobian Matrix*/
		MatrixXd intermediate = J.transpose() * J + lambda * IdentityMat;
		MatrixXd h = intermediate.inverse() * (J.transpose() * (y_measured - y));	/*Computed Change in parameters*/

		//cout << "h =\n" << h << endl;

		chi2p = sumofsquaresofcoeff(y_measured - function_y(para, x))/para.rows(); 
		chi2p_plus_h = sumofsquaresofcoeff(y_measured - function_y(para + h, x))/ para.rows();

		double rho = rho_function(para, x, h, J, y_measured, lambda);	/*Computing the deciding factor for Lambda change*/

		cout << "chi2p = " << chi2p << ", rho = " << rho << endl;
		
		if (rho > 1e-1) {
			para = para + h;
			v = 2.0;
			if ((1 - pow((2 * rho), 3)) < 1 / 3) { lambda = lambda * (1 / 3); }
			else {
				lambda = lambda * (1 - pow((2 * rho), 3));
			}

			cout << "Parameters updated" << endl;
		}
		else {
			lambda = lambda * v;
			v = 2 * v;
			cout << "Parameters not updated" << endl;
		}

	} while ((chi2p*para.rows()/(para.rows() + x.rows() - 1)) > 1e-2);

	return para;
}


void main() {
	

	/*MatrixXd measured{
		{ 0,124.246,119.5738734,114.9870446,110.4855135,106.0692803,101.7383449,97.49270721,93.33236735,89.25732528,85.26758101,81.36313453,77.54398584,73.81013494,70.16158184,66.59832653,63.12036901,59.72770929,56.42034736,53.19828322,50.06151687,47.01004831,44.04387755,41.16300458,38.3674294,35.65715202,33.03217243,30.49249063,28.03810662,25.66902041,23.38523199,21.18674136,19.07354852,17.04565348,15.10305623,13.24575677,11.4737551,9.787051229,8.185645148,6.66953686,5.238726364,3.893213661,2.632998751,1.458081633,0.368462307,-0.635859225,-1.554882965,-2.388608913,-3.137037068,-3.80016743,-4.378,}
	};

	MatrixXd data{
		{ 0,-7,-6.836734694,-6.673469388,-6.510204082,-6.346938776,-6.183673469,-6.020408163,-5.857142857,-5.693877551,-5.530612245,-5.367346939,-5.204081633,-5.040816327,-4.87755102,-4.714285714,-4.551020408,-4.387755102,-4.224489796,-4.06122449,-3.897959184,-3.734693878,-3.571428571,-3.408163265,-3.244897959,-3.081632653,-2.918367347,-2.755102041,-2.591836735,-2.428571429,-2.265306122,-2.102040816,-1.93877551,-1.775510204,-1.612244898,-1.448979592,-1.285714286,-1.12244898,-0.959183673,-0.795918367,-0.632653061,-0.469387755,-0.306122449,-0.142857143,0.020408163,0.183673469,0.346938776,0.510204082,0.673469388,0.836734694,1 }
				};
				
	*/ //0.5 -6.478*x + 1.6*x**2 WORKING
		
	/*MatrixXd data{
		{0,-1,-0.949494949,-0.898989899,-0.848484848,-0.797979798,-0.747474747,-0.696969697,-0.646464646,-0.595959596,-0.545454545,-0.494949495,-0.444444444,-0.393939394,-0.343434343,-0.292929293,-0.242424242,-0.191919192,-0.141414141,-0.090909091,-0.04040404,0.01010101,0.060606061,0.111111111,0.161616162,0.212121212,0.262626263,0.313131313,0.363636364,0.414141414,0.464646465,0.515151515,0.565656566,0.616161616,0.666666667,0.717171717,0.767676768,0.818181818,0.868686869,0.919191919,0.96969697,1.02020202,1.070707071,1.121212121,1.171717172,1.222222222,1.272727273,1.323232323,1.373737374,1.424242424,1.474747475,1.525252525,1.575757576,1.626262626,1.676767677,1.727272727,1.777777778,1.828282828,1.878787879,1.929292929,1.97979798,2.03030303,2.080808081,2.131313131,2.181818182,2.232323232,2.282828283,2.333333333,2.383838384,2.434343434,2.484848485,2.535353535,2.585858586,2.636363636,2.686868687,2.737373737,2.787878788,2.838383838,2.888888889,2.939393939,2.98989899,3.04040404,3.090909091,3.141414141,3.191919192,3.242424242,3.292929293,3.343434343,3.393939394,3.444444444,3.494949495,3.545454545,3.595959596,3.646464646,3.696969697,3.747474747,3.797979798,3.848484848,3.898989899,3.949494949,4,}
	};

	MatrixXd measured{
		{ 0,- 1,- 0.949494949,- 0.898989899,- 0.848484848,- 0.797979798,- 0.747474747,- 0.696969697,- 0.646464646,- 0.595959596,- 0.545454545,- 0.494949495,- 0.444444444,- 0.393939394,- 0.343434343,- 0.292929293,- 0.242424242,- 0.191919192,- 0.141414141,- 0.090909091,- 0.04040404,0.01010101,0.060606061,0.111111111,0.161616162,0.212121212,0.262626263,0.313131313,0.363636364,0.414141414,0.464646465,0.515151515,0.565656566,0.616161616,0.666666667,0.717171717,0.767676768,0.818181818,0.868686869,0.919191919,0.96969697,1.02020202,1.070707071,1.121212121,1.171717172,1.222222222,1.272727273,1.323232323,1.373737374,1.424242424,1.474747475,1.525252525,1.575757576,1.626262626,1.676767677,1.727272727,1.777777778,1.828282828,1.878787879,1.929292929,1.97979798,2.03030303,2.080808081,2.131313131,2.181818182,2.232323232,2.282828283,2.333333333,2.383838384,2.434343434,2.484848485,2.535353535,2.585858586,2.636363636,2.686868687,2.737373737,2.787878788,2.838383838,2.888888889,2.939393939,2.98989899,3.04040404,3.090909091,3.141414141,3.191919192,3.242424242,3.292929293,3.343434343,3.393939394,3.444444444,3.494949495,3.545454545,3.595959596,3.646464646,3.696969697,3.747474747,3.797979798,3.848484848,3.898989899,3.949494949,4}
	}; //0.5 -6.478*x + 1.6*x**2+2.23*x*x*x NOT WORKING
	*/

	MatrixXd data{
			{0,-1,-0.949494949,-0.898989899,-0.848484848,-0.797979798,-0.747474747,-0.696969697,-0.646464646,-0.595959596,-0.545454545,-0.494949495,-0.444444444,-0.393939394,-0.343434343,-0.292929293,-0.242424242,-0.191919192,-0.141414141,-0.090909091,-0.04040404,0.01010101,0.060606061,0.111111111,0.161616162,0.212121212,0.262626263,0.313131313,0.363636364,0.414141414,0.464646465,0.515151515,0.565656566,0.616161616,0.666666667,0.717171717,0.767676768,0.818181818,0.868686869,0.919191919,0.96969697,1.02020202,1.070707071,1.121212121,1.171717172,1.222222222,1.272727273,1.323232323,1.373737374,1.424242424,1.474747475,1.525252525,1.575757576,1.626262626,1.676767677,1.727272727,1.777777778,1.828282828,1.878787879,1.929292929,1.97979798,2.03030303,2.080808081,2.131313131,2.181818182,2.232323232,2.282828283,2.333333333,2.383838384,2.434343434,2.484848485,2.535353535,2.585858586,2.636363636,2.686868687,2.737373737,2.787878788,2.838383838,2.888888889,2.939393939,2.98989899,3.04040404,3.090909091,3.141414141,3.191919192,3.242424242,3.292929293,3.343434343,3.393939394,3.444444444,3.494949495,3.545454545,3.595959596,3.646464646,3.696969697,3.747474747,3.797979798,3.848484848,3.898989899,3.949494949,4}
		};

	MatrixXd measured{
		{0,9.578,8.906068897,8.269908608,7.66666153,7.093626216,6.548257371,6.028165854,5.531118676,5.055039001,4.598006147,4.158255584,3.734178936,3.324323979,2.927394644,2.542251012,2.167909319,1.803541955,1.448477461,1.102200533,0.764352017,0.434728916,0.113284382,-0.199872276,-0.504475598,-0.800103972,-1.08617963,-1.361968654,-1.626580971,-1.878970356,-2.11793443,-2.342114662,-2.549996367,-2.739908707,-2.910024691,-3.058361177,-3.182778866,-3.28098231,-3.350519905,-3.388783895,-3.393010371,-3.360279271,-3.28751438,-3.17148333,-3.008797599,-2.795912513,-2.529127245,-2.204584815,-1.818272088,-1.366019779,-0.843502447,-0.246238501,0.430409806,1.191236373,2.04119125,2.985380643,4.029066911,5.177668562,6.436760263,7.81207283,9.309493232,10.93506459,12.69498619,14.59561345,16.64345796,18.84518745,21.20762581,23.73775309,26.44270547,29.3297753,32.40641109,35.68021749,39.1589553,42.85054149,46.76304917,50.9047076,55.28390221,59.90917456,64.78922237,69.93289954,75.34921609,81.0473382,87.03658821,93.32644461,99.92654205,106.8466713,114.0967794,121.6869693,129.6275004,137.928788,146.6014037,155.6560753,165.1036865,174.9552775,185.2220443,195.9153394,207.0466711,218.6277042,230.6702594,243.1863136,256.188
			}
	};	//0.5 -6.478*x + 1.6*x**2+x*x*x*x WORKING

	int dp = measured.cols();
	measured = measured.reshaped(dp, 1);
	data = data.reshaped(dp, 1);

	MatrixXd parameters{
		{0.5,-6.5,1.5,0.7} 
	};

	MatrixXd init{
		{0.01,0.01,0.01,0.01}
	};

	parameters = parameters.reshaped(4, 1);
	init = init.reshaped(4, 1);

	MatrixXd final_parameters = levenberg_fit(measured, data, init, parameters, 1e2);
	cout << final_parameters << endl;
}